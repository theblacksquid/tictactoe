// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, Row, getX, getY, isStraightLine, myrow, slope, turn;

  getX = function(tuple) {
    return tuple[0];
  };

  getY = function(tuple) {
    return tuple[1];
  };

  slope = function(point1, point2) {
    switch (false) {
      case (getY(point1) - getY(point2)) !== 0:
        return 'VERTICAL';
      case (getX(point1) - getX(point2)) !== 0:
        return 'HORIZONTAL';
      default:
        return (getY(point1) - getY(point2)) / (getX(point1) - getX(point2));
    }
  };

  isStraightLine = function(lineArr) {
    switch (false) {
      case lineArr !== []:
        return "EMPTY";
      case "" !== 0:
        return true;
      default:
        return false;
    }
  };

  console.log("hello");

  turn = 1;

  Cell = (function() {
    function Cell(el, col, row) {
      this.el = el;
      this.col = col;
      this.row = row;
      this.status = 'unclaimed';
    }

    Cell.prototype.template = function() {
      return "<div class='cell' id='cell-" + this.row + "-" + this.col + "'>\n	<img id='cell-" + this.row + "-" + this.col + "-img' src='icons/ic_crop_din_black_24dp/web/ic_crop_din_black_24dp_2x.png' />\n</div>";
    };

    Cell.prototype.render = function() {
      $(this.el).append(this.template());
      return this.onClick();
    };

    Cell.prototype.onClick = function() {
      var self;
      self = this;
      return $("#cell-" + this.row + "-" + this.col + "-img").click(function() {
        if (self.status === 'unclaimed') {
          if ((turn % 2) === 0) {
            self.status = 'claimed-X';
            $("#cell-" + self.row + "-" + self.col + "-img").attr("src", "icons/ic_block_black_24dp/web/ic_block_black_24dp_2x.png");
            return turn++;
          } else {
            self.status = 'claimed-O';
            $("#cell-" + self.row + "-" + self.col + "-img").attr("src", "icons/ic_clear_black_24dp/web/ic_clear_black_24dp_2x.png");
            return turn++;
          }
        } else {
          return console.log("claimed cell clicked");
        }
      });
    };

    return Cell;

  })();

  Row = (function() {
    function Row(el, rownum, numcells) {
      this.el = el;
      this.rownum = rownum;
      this.numcells = numcells;
      this.cells = [];
    }

    Row.prototype.template = function() {
      return "<div id='row-" + this.rownum + "' style='float:left'>\n</div>";
    };

    Row.prototype.render = function() {
      $(this.el).append(this.template());
      return this.generateCells(this.numcells);
    };

    Row.prototype.generateCells = function(cellnums) {
      var cell, i, results;
      i = 0;
      results = [];
      while (cellnums > i) {
        cell = new Cell("#row-" + this.rownum, this.rownum, i);
        this.cells.push(cell);
        cell.render();
        results.push(i++);
      }
      return results;
    };

    return Row;

  })();

  myrow = new Row("#app", 0, 3);

  myrow.render();

}).call(this);
