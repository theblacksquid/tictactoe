// Generated by CoffeeScript 1.10.0
(function() {
  var Cell, Grid, Row, Start, didPlayerWin, evalGame, flatten, game, getCurrentState, getX, getY, lineFromGrid, pointsEq, slope;

  getX = function(pt) {
    return pt[0];
  };

  getY = function(pt) {
    return pt[1];
  };

  slope = function(point1, point2) {
    switch (false) {
      case (getY(point1) - getY(point2)) !== 0:
        return 'VERTICAL';
      case (getX(point1) - getX(point2)) !== 0:
        return 'HORIZONTAL';
      default:
        return (getY(point1) - getY(point2)) / (getX(point1) - getX(point2));
    }
  };

  lineFromGrid = function(grid, direction, start) {
    var cache, i, j, len, length, row;
    length = grid.length;
    cache = [];
    i = start;
    switch (false) {
      case direction !== 'HORIZONTAL':
        return grid[start];
      case direction !== 'VERTICAL':
        for (j = 0, len = grid.length; j < len; j++) {
          row = grid[j];
          cache.push(row[start]);
        }
        return cache;
      case direction !== 'DIAGONAL':
        while (length > i) {
          cache.push(grid[i][i]);
          i++;
        }
        return cache;
      case direction !== 'ANTI-DIAG':
        while (length > i) {
          cache.push(grid[i][(length - 1) - i]);
          i++;
        }
        return cache;
    }
  };

  pointsEq = function(lineArr) {
    var i;
    i = 0;
    while (lineArr.length > i) {
      if (lineArr[i] !== lineArr[0]) {
        return false;
      }
      i++;
    }
    return true;
  };

  flatten = function(arr) {
    return [].concat.apply([], arr);
  };

  didPlayerWin = function(player, gamestate) {
    var anti, arr, diag, horiz, i, item, j, len, vert;
    i = 0;
    while (gamestate.length > i) {
      horiz = lineFromGrid(gamestate, "HORIZONTAL", i);
      vert = lineFromGrid(gamestate, "VERTICAL", i);
      diag = lineFromGrid(gamestate, "DIAGONAL", 0);
      anti = lineFromGrid(gamestate, "ANTI-DIAG", 0);
      arr = [horiz, vert, diag, anti];
      for (j = 0, len = arr.length; j < len; j++) {
        item = arr[j];
        if ((pointsEq(item) === true) && (item[0] === player)) {
          return true;
        }
      }
      i++;
    }
    return false;
  };

  evalGame = function(gamestate, player1, player2) {
    var cells, non_null;
    non_null = flatten(gamestate).filter(function(x) {
      if (x !== "unclaimed") {
        return true;
      }
    });
    cells = flatten(gamestate).length;
    if (didPlayerWin(player1, gamestate)) {
      return player1 + " wins";
    } else if (didPlayerWin(player2, gamestate)) {
      return player2 + " wins";
    } else if (non_null.length === cells) {
      return "DRAW";
    } else {
      return "CONTINUE";
    }
  };

  getCurrentState = function(grid) {
    var cache, cell, j, k, len, len1, ref, row, rows, state;
    rows = grid.rows;
    state = [];
    for (j = 0, len = rows.length; j < len; j++) {
      row = rows[j];
      cache = [];
      ref = row.cells;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        cell = ref[k];
        cache.push(cell.status);
      }
      state.push(cache);
    }
    return state;
  };

  game = {};

  game.state = [];

  game.turns = 1;

  game.over = function(grid) {
    var cell, j, len, ref, results, row;
    ref = grid.rows;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      row = ref[j];
      results.push((function() {
        var k, len1, ref1, results1;
        ref1 = row.cells;
        results1 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          cell = ref1[k];
          results1.push($("#cell-" + cell.row + "-" + cell.col + "-img").off());
        }
        return results1;
      })());
    }
    return results;
  };

  game.main = function(parent, num) {
    var cell, grd, isState, j, len, ref, results, row, state, turns;
    turns = this.turns;
    state = this.state;
    grd = new Grid(parent, num);
    grd.render();
    isState = "CONTINUE";
    ref = grd.rows;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      row = ref[j];
      results.push((function() {
        var k, len1, ref1, results1;
        ref1 = row.cells;
        results1 = [];
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          cell = ref1[k];
          results1.push($("#cell-" + cell.row + "-" + cell.col + "-img").click(function() {
            var result;
            state = getCurrentState(grd);
            result = evalGame(state, "X", "O");
            console.log(result);
            if (result !== "CONTINUE") {
              return game.over(grd);
            }
          }));
        }
        return results1;
      })());
    }
    return results;
  };

  Cell = (function() {
    function Cell(el, col, row1) {
      this.el = el;
      this.col = col;
      this.row = row1;
      this.status = 'unclaimed';
      this.id = "cell-" + this.row + "-" + this.col;
    }

    Cell.prototype.template = function() {
      return "        <div class='cell' id='cell-" + this.row + "-" + this.col + "' style='display: inline-block'>\n	<img id='cell-" + this.row + "-" + this.col + "-img' src='icons/ic_crop_din_black_24dp/web/ic_crop_din_black_24dp_2x.png' />\n</div>";
    };

    Cell.prototype.render = function() {
      $(this.el).append(this.template());
      return this.onClick();
    };

    Cell.prototype.onClick = function() {
      var self;
      self = this;
      return $("#cell-" + this.row + "-" + this.col + "-img").click(function() {
        if (self.status === 'unclaimed') {
          if ((game.turns % 2) === 0) {
            self.status = 'O';
            $("#cell-" + self.row + "-" + self.col + "-img").attr("src", "icons/ic_block_black_24dp/web/ic_block_black_24dp_2x.png");
            return game.turns++;
          } else {
            self.status = 'X';
            $("#cell-" + self.row + "-" + self.col + "-img").attr("src", "icons/ic_clear_black_24dp/web/ic_clear_black_24dp_2x.png");
            return game.turns++;
          }
        } else {
          return console.log("claimed cell clicked");
        }
      });
    };

    return Cell;

  })();

  Row = (function() {
    function Row(el, rownum, numcells) {
      this.el = el;
      this.rownum = rownum;
      this.numcells = numcells;
      this.cells = [];
      this.id = "row-" + this.rownum;
    }

    Row.prototype.template = function() {
      return "<div id='row-" + this.rownum + "'>\n</div>";
    };

    Row.prototype.render = function() {
      $(this.el).append(this.template());
      return this.generateCells(this.numcells);
    };

    Row.prototype.generateCells = function(cellnums) {
      var cell, i, results;
      i = 0;
      results = [];
      while (cellnums > i) {
        cell = new Cell("#row-" + this.rownum, this.rownum, i);
        this.cells.push(cell);
        cell.render();
        results.push(i++);
      }
      return results;
    };

    return Row;

  })();

  Grid = (function() {
    function Grid(el, numrows) {
      this.el = el;
      this.numrows = numrows;
      this.rows = [];
    }

    Grid.prototype.template = function() {
      return "<div id='game-grid'>\n</div>";
    };

    Grid.prototype.render = function() {
      $(this.el).append(this.template());
      return this.generateRows(this.numrows);
    };

    Grid.prototype.generateRows = function(rownums) {
      var i, results, row;
      i = 0;
      results = [];
      while (rownums > i) {
        row = new Row("#game-grid", i, rownums);
        this.rows.push(row);
        row.render();
        results.push(i++);
      }
      return results;
    };

    return Grid;

  })();

  Start = (function() {
    function Start() {}

    return Start;

  })();

  game.main("#app", 3);

}).call(this);
